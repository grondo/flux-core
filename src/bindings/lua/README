Flux API Lua bindings
=======================

Contents:

1. Examples
   - Simple Flux RPC
   - Using the KVS
2. Flux API usage
3. Kvsdir usage

=======================
1. Examples:

First, a quick example to display the basics:

 Example 1: Simple flux RPC in Lua -- the stats rpc
 
 local flux = require 'flux'    -- Load flux module
 local f,err = flux.new()       -- New flux handle (via cmb_init())
 if not f then error (err) end 

 -- Lua methods are called by object:method() syntax:
 --  the rpc() method takes (tag, lua-table) args. The Lua table
 --  is converted to json before being passed to flux_rpc() and
 --  if not supplied, NULL is assumed:
 --
 local resp,err = f:rpc ("kvs.stats")
 if not resp then error (err) end

 -- Response 'resp' is a Lua table encoding of the response JSON:
 if resp.errnum then
    error ("Got error number" .. resp.errnum)
 end
 for k,v in pairs (resp) do
   print (k.." = "..v)
 end

 Example 2: Using the KVS in Lua

 local kvsdir = require 'kvs' -- Load kvs Lua implementation

 -- Create a kvsdir object from flux handle [f]:
 -- 
 local lwj = f:kvsdir ("lwj.%d", id)
 
 -- kvsdir objects can be indexed just like Lua tables:
 if lwj.state ~= "complete" then
    print ("Job not complete")
    os.exit (1)
 end

 -- Iterate through keys with kvsdir.keys() function:
 for taskid in kvsdir.keys (lwj) do
    if tonumber(taskid) then -- Ignore non-numeric entries

       -- Get task kvsdir handle
       -- (use [] here because 'taskid' is a variable not a literal)
       local task = lwj[taskid]

       -- print this task's exit status:
       print ("Task"..taskid.." exited with status "..task.exit_status)

    end
 end

=======================
2. Flux API usage:

The Flux API is encapsulated in Lua via the 'flux' module. Using

 local flux = require 'flux'

Loads the flux module implementation into a local table called "flux".

The only function exported from the flux table is the "new" method,
which creates a new flux handle via cmb_init() (See cmb.h). In Lua,
multiple return values are allowed, and a common idiom is to have
functions return value,error, and the flux new() implementation is
no different, e.g.:

 local f,err = flux.new()

If f is 'nil', then err will contain an error message. From Lua
scripts it is common to test for errors like:

 if not f then error (err) end

where error() is a Lua builtin error function that aborts the current
script (obviously this is only good for scripts, _not_ for use in plugins)

Most of the flux-lua functionality is currently supported as methods
on a flux handle. The currently supported methods include:

 f:kvsdir([key])            Create a new kvsdir object from optional key.
                             Default is '.'
 f:barrier(name,nprocs)     Issue a barrier with 'name' and for nprocs procs.

 f:send (tag, table)        Same as flux_request_send()

 table,tag = f:recv()       Same as flux_response_recv() returning JSON
                             as first return value and tag, if included,
                             as second return value. If table is nil, then
                             tag will be an error string.
 r,err = f:rpc (tag,table)  Send rpc with tag [tag] and lua table as contents.
                             Returns response as first value, if r == nil
                             then an error string is in 2nd return value.

 f:sendevent ([table], fmt, ...)
                            Send an event with optional [table] as first
                             arg, and/or tag with format string.
                             e.g. f:sendevent ("ev.%d", 1)

 
These are the initial methods, but the flux module will be further fleshed
out later.


=======================
3. Kvsdir Usage:

As seen above, kvsdir objects are created with f:kvsdir([key]) from
a flux handle [f]. The kvsdir objects themselves have no methods,
but instead simulate a lua table interface to the kvs. This lends
itself to natural operations such as

 local kvsdir = require 'kvs'
 local conf = f:kvsdir ("conf")

 print ("persist-leve = " .. conf.log['persist-level'])

Setting values in the kvs is also supported, e.g:

 conf.log['reduction-timeout-msec'] = 1000

To  commit values, the commit() function from the kvs library must be used,
and a valid kvsdir must be passed in (unfortunately, this is a current
limitation of the implementation)

 kvsdir.commit (conf)

The iterator is also encapsulated in a kvsdir function:

 for k in kvsdir.keys (conf) do
  ...
 end

Finally, there is also a 'watch' implementation, but not watchdir as
of yet:

 repeat
   -- On initial call r == nil, so kvsdir.watch() returns immediately
   local r = kvs.watch (dir, "state", r)
   print (r)
 until r == "complete"



