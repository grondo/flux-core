#!/usr/bin/env lua

-------------------------------------------------------------
-- Copyright 2018 Lawrence Livermore National Security, LLC
-- (c.f. AUTHORS, NOTICE.LLNS, COPYING)
--
-- This file is part of the Flux resource manager framework.
-- For details, see https://github.com/flux-framework.
--
-- SPDX-License-Identifier: LGPL-3.0
-------------------------------------------------------------

--
-- flux-hostlist: print list of hosts in hostfile format for instance
--
--
local getopt = require 'flux.alt_getopt'.get_opts
local hostlist = require 'flux.hostlist'
local prog = "flux-hostlist"
local hostkey = "resource.hosts"

local function printf (...)
    io.stdout:write (string.format (...))
end

local function die (...)
    io.stderr:write (prog..": "..string.format (...))
    os.exit (1)
end

-- Return an array of all instance hosts by rank
-- where hosts[rank+1] == hostname (Lua arrays are 1 origin, not 0 origin)
local instance_hosts = {}
local function instance_host_table (arg)
    local f = arg.flux

    if #instance_hosts > 0 then
        return instance_hosts
    end

    if arg.ranks then
        for i=1,f.size do
            table.insert (instance_hosts, i-1)
        end
        return instance_hosts
    end

    local hosts = f:kvs_get ("resource.hosts")
    if hosts then
        hosts = hostlist.concat (hosts):expand ()
        return hosts
    end

    -- O/w, try using flux-exec hostname:
    hosts = {}
    local r, err = io.popen ("flux exec -l hostname", "r")
    if not r then die ("flux-exec failed: %s", err) end
    for l in r:lines () do
        local rank, host = l:match ("^(%d+):%s+(%S+)")
        hosts[rank+1] = host
    end

    -- Verify that information for all ranks was returned
    for i = 1,f.size do
        if not hosts[i] then
            die ("flux-exec failed to return info for rank %d!\n", i)
        end
    end
    instance_hosts = hosts
    return hosts
end

local function hosts_from_stream (fp)
    local hosts = {}
    for line in fp:lines() do
        for w in line:gmatch ('%S+') do table.insert (hosts, w) end
    end
    return hosts
end

-- Set the instance hostlist at hostkey from list of hosts on stdin
--  or a file (arg.input).
local function set_hostlist (arg)
    local f = arg.flux
    local input = arg.input
    local fp = io.stdin

    -- Open input file if not using stdin:
    if input and not input == "-" then
        fp, err = io.open (input, "r")
        if not fp then die ("open: %s: %s\n", input, err) end
    end

    -- create new hostlist from lines of hosts on stream fp:
    local hosts = hosts_from_stream (fp)
    if #hosts == 0 then
        die ("--set: no hosts found!")
    end
    fp:close()
    local hl,err = hostlist.concat (unpack (hosts))
    if not hl then die ("hostlist set: hostlist.concat: %s\n", err) end


    -- Put string representation of hostlist into `hostkey`:
    local rc, err = f:kvs_put (hostkey, tostring (hl))
    if not rc then die ("failed to put hostlist in %s: %s\n", hostkey, err) end
    f:kvs_commit ()
end

local function usage (code)
    printf ("Usage: %s [OPTIONS]...\n", prog)
    printf ("Get/set a list of hosts for the current session\n")
    printf ("Options:\n")
    printf (" -h, --help       Display this message.\n")
    printf (" -r, --ranks      Output rank ids instead of hostnames.\n")
    printf (" -c, --compressed Output in hostlist compressed format.\n")
    printf (" -s, --set        Initialize %s for this session\n", hostkey)
    os.exit (code or 0)
end

-----------------------------------------------------------------------------
--  Main program:
-----------------------------------------------------------------------------
--
--
local getopt = require 'flux.alt_getopt'.get_opts
local opts, optind = getopt (arg, "rcsh",
                             { compressed = "c",
                               ranks = "r",
                               set = "s",
                               help = "h"
                             })
if opts.h then usage() end

local f, err = require 'flux' .new()
if not f then die (err) end

-- If --set was used then set hostlist from stdin or arg[1]:
if opts.s then
    set_hostlist { flux = f, input = arg[optind] }
    os.exit (0)
end

for i = 1,optind-1 do table.remove (arg, 1) end

-- read the instance hosts table
local hosts = instance_host_table { flux = f, ranks = opts.r }

-- Print result:
if opts.c then
    print (hostlist.concat (unpack (hosts)))
else
    print (table.concat (hosts, "\n"))
end

--  vi: ts=4 sw=4 expandtab
